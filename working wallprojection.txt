for (int x = 0; x < NUM_RAYS; x++) {

	std::vector<DelayedPixel> vDelayedPixels;

	bool bFinished = false;

	for (int i = 0; i < (int)ray.rays[x].HitListType.size() && !bFinished; i++)
	{
		float prepDistance = ray.rays[x].HitListType[i].distance * cos(ray.rays[x].HitListType[i].rayAngle - player.rotationAngle);

		float WallHeight = (TILE_SIZE / prepDistance * Dist_PROJ_PLANE);

		int wallStripHeight = (int)WallHeight;

		int wallTopY = (WINDOW_HEIGHT / 2) - (wallStripHeight / 2);
		int wallBottomY = (WINDOW_HEIGHT / 2) + (wallStripHeight / 2);

		wallTopY = wallTopY < 0 ? 0 : wallTopY;
		wallBottomY = wallBottomY > WINDOW_HEIGHT ? WINDOW_HEIGHT : wallBottomY;

		int nHalfWindowHeight = WINDOW_HEIGHT / 2;
		float fPlayerH = TILE_SIZE / 2.0f;
		float fFoV = 60.0f;
		float fAngleStep = fFoV / (float)NUM_RAYS;
		float fViewAngle = (float)(x - (NUM_RAYS / 2)) * fAngleStep;
		float fCurAngle = (player.rotationAngle * 180.0f / PI) + fViewAngle;
		float fPlayerX = player.x;
		float fPlayerY = player.y;
		float fCosCurAngle = cos(fCurAngle * PI / 180.0f);
		float fSinCurAngle = sin(fCurAngle * PI / 180.0f);
		float fCosViewAngle = cos(fViewAngle * PI / 180.0f);



		int textureOffSetX;
		if (ray.rays[x].HitListType[i].wasHitVertical) {
			textureOffSetX = (int)ray.rays[x].HitListType[i].wallHitY % TILE_SIZE;
		}
		else {
			textureOffSetX = (int)ray.rays[x].HitListType[i].wallHitX % TILE_SIZE;
		}

		int texNum = ray.rays[x].HitListType[i].texture - 1;

		int texture_width = walltextures[texNum]->width;
		int texture_height = walltextures[texNum]->height;

		for (int y = 0; y < WINDOW_HEIGHT; y++)
		{
			if (y < wallTopY)         // pixel is above the wall, render sky color
			{
				pge->Draw(x, y, olc::CYAN);
			}
			else if (y > wallBottomY)  // pixel is below the wall, render floor pixel
			{

				float fFloorProjDistance = ((fPlayerH / (float)(y - nHalfWindowHeight)) * Dist_PROJ_PLANE) / fCosViewAngle;
				float fFloorProjX = fPlayerX + fFloorProjDistance * fCosCurAngle;
				float fFloorProjY = fPlayerY + fFloorProjDistance * fSinCurAngle;
				int nSampleX = (int)(fFloorProjX) % TILE_SIZE;
				int nSampleY = (int)(fFloorProjY) % TILE_SIZE;

				olc::Pixel color = walltextures[4]->GetPixel(nSampleX, nSampleY);

				pge->Draw(x, y, color);
			}
			else                      // pixel is part of the wall, render wall pixel
			{
                int distanceFromTop = y + (wallStripHeight / 2) - (WINDOW_HEIGHT / 2);
				int textureOffSetY = distanceFromTop * ((float)texture_height / wallStripHeight);


				olc::Pixel texelColor = walltextures[texNum]->GetPixel(textureOffSetX, textureOffSetY);

				if (isTranparent[texNum])
				{
					vDelayedPixels.push_back({ x,y,texelColor });
				}
				else
				{
					pge->Draw(x, y, texelColor);
				}

				
			}
		}
		bFinished = !isTranparent[texNum];
		
	}

	for (int i = (int)vDelayedPixels.size() - 1; i >= 0; i--) {
		DelayedPixel& dp = vDelayedPixels[i];
		if (dp.p != olc::BLANK) {

			pge->Draw(dp.x, dp.y, dp.p);
		}
	}
}